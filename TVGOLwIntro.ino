// Added title card and introductory text to
// Conway's Game Of Life 128x96 using TVout
// by P.Beard

#include <TVout.h>
#include <fontALL.h>

#define matWidth 4
#define matHeight 96

TVout TV;
unsigned long * myScreen;
extern const unsigned char cardcenter[];

#define MAX_BUFFER_SIZE 30
char buffer[MAX_BUFFER_SIZE];

byte card_x, card_y;

#define TVprintln(message) \
   { static  const char foo[] PROGMEM = message;       \
   strcpy_P(buffer,  foo);\
   TV.println(buffer);}

void setup() {
 TV.begin(NTSC, matWidth * 32, matHeight);

  card_x = 7;
  card_y = 0;
  
  
  TV.bitmap(card_x, card_y, cardcenter);
  TV.delay(5000);
  
 TV.clear_screen();
 TV.delay(1000);
 TV.select_font(font6x8);
 TVprintln("The Game of Life,\n");
 TV.delay(1500);
 TVprintln("also known simply\n");
 TV.delay(1500);
 TVprintln("as Life,\n");
 TV.delay(1500);
 TVprintln("is a cellular\n");
 TV.delay(1500);
 TVprintln("automaton\n");
 TV.delay(1500);
 TV.clear_screen();
 TV.delay(500);
 TVprintln("devised by the\n");
 TV.delay(1500);
 TVprintln("British mathematician\n");
 TV.delay(1400);
 TVprintln("John Horton Conway\n");
 TV.delay(1500);
 TVprintln("in 1970.\n");
 TV.delay(3500);
 TV.clear_screen();
 TV.delay(500);
 TVprintln("It is a zero-player\n");
 TV.delay(1500);
 TVprintln("game,\n");
 TV.delay(1500);
 TVprintln("meaning that its\n");
 TV.delay(1500);
 TVprintln("evolution is\n");
 TV.delay(1500);
 TVprintln("determined\n");
 TV.delay(3500);
 TV.clear_screen();
 TV.delay(500);
 TVprintln("by its initial state,\n");
 TV.delay(1500);
 TVprintln("requiring no\n");
 TV.delay(1500);
 TVprintln("further input.\n");
 TV.delay(3500);
 TV.clear_screen();
 TV.delay(500);    


 
 TV.select_font(font8x8);
 TVprintln("  ");
 TVprintln("  ");
 TVprintln("  ");
 TVprintln("  ");
 TVprintln("  Please enjoy\n");
 TV.delay(3500);
 TV.clear_screen();
 myScreen = (unsigned long *) TV.screen;
 randomSeed(analogRead(0));
 randomiseMatrix();
}

void loop() {
 generateMatrix();
 digitalWrite(13, !digitalRead(13));
}

unsigned long swapBytes(unsigned long x) {
 return ((x & 0x000000ffUL) << 24) | ((x & 0x0000ff00UL) << 8) | ((x & 0x00ff0000UL) >> 8) | ((x & 0xff000000UL) >> 24);
}

void randomiseMatrix() {

 //Set up initial cells in matrix
 for (int r = 0; r < matHeight; r++) {
   for (int c = 0; c < matWidth; c++) {
     myScreen[r * matWidth + c] = random(0xffff) << 16 | random(0xffff);
   }
 }
}

void injectGlider() {

 byte col = random(matWidth);
 byte row = random(matHeight);
 myScreen[(row+0) * matWidth + col] |= B0000111;
 myScreen[(row+1) * matWidth + col] |= B0000001;
 myScreen[(row+2) * matWidth + col] |= B0000010;

}
  
void generateMatrix() {
 
 //Variables holding data on neighbouring cells
 unsigned long NeighbourN[matWidth], NeighbourNW[matWidth], NeighbourNE[matWidth], CurrCells[matWidth], NeighbourW[matWidth];
 unsigned long NeighbourE[matWidth], NeighbourS[matWidth], NeighbourSW[matWidth], NeighbourSE[matWidth], firstRow[matWidth];
  
 unsigned long tot1, tot2, tot4, carry, NewCells;

 int changes = 0; // counts the changes in the matrix
 static int prevChanges = 256; // counts the changes in the matrix on prev generation
 static int staleCount = 0; // counts the consecutive occurrances of the same number of changes in the matrix

 //set up N, NW, NE, W & E neighbour data
 //also take a copy of the first row data for use later when calculating last row
 for (byte b = 0; b < matWidth; b++) {
   NeighbourN[b] = swapBytes(myScreen[(matHeight-1) * matWidth + b]);
   firstRow[b] = CurrCells[b] = swapBytes(myScreen[b]);
   
 }

 carry = NeighbourN[matWidth-1];
 for (char b = 0; b < matWidth; b++) {
   NewCells = NeighbourN[b];
   NeighbourNW[b] = NewCells >> 1 | carry << 31;
   carry = NewCells;
 }
 
 carry = NeighbourN[0];    
 for (char b = matWidth-1; b >= 0; b--) {
   NewCells = NeighbourN[b];
   NeighbourNE[b] = NewCells << 1 | carry >> 31;
   carry = NewCells;
 }
  
 carry = CurrCells[matWidth-1];
 for (char b = 0; b < matWidth; b++) {
   NewCells = CurrCells[b];
   NeighbourW[b] = NewCells >> 1 | carry << 31;
   carry = NewCells;
 }
 
 carry = CurrCells[0];    
 for (char b = matWidth-1; b >= 0; b--) {
   NewCells = CurrCells[b];
   NeighbourE[b] = NewCells << 1 | carry >> 31;
   carry = NewCells;
 }
 
 //Process each row of the matrix
 for (byte row = 0; row < matHeight; row++) {
    
   //Pick up new S, SW & SE neighbours
   if (row < matHeight - 1) {
     for (byte b = 0; b < matWidth; b++) {
       NeighbourS[b] = swapBytes(myScreen[(row+1) * matWidth + b]);
     }
   }
   else {
     for (byte b = 0; b < matWidth; b++) {
       NeighbourS[b] = firstRow[b];
     }
   }
 
   carry = NeighbourS[matWidth-1];
   for (char b = 0; b < matWidth; b++) {
     NewCells = NeighbourS[b];
     NeighbourSW[b] = NewCells >> 1 | carry << 31;
     carry = NewCells;
   }
     
   carry = NeighbourS[0];    
   for (char b = matWidth-1; b >= 0; b--) {
     NewCells = NeighbourS[b];
     NeighbourSE[b] = NewCells << 1 | carry >> 31;
     carry = NewCells;
   }
 
   for (char b = 0; b < matWidth; b++) {
     
      //Count the live neighbours (in parallel) for the current row of cells
     //However, if total goes over 3, we don't care (see below), so counting stops at 4
     tot1 = NeighbourN[b];
     tot2 = tot1 & NeighbourNW[b]; tot1 = tot1 ^ NeighbourNW[b];
     carry = tot1 & NeighbourNE[b]; tot1 = tot1 ^ NeighbourNE[b]; tot4 = tot2 & carry; tot2 = tot2 ^ carry;
     carry = tot1 & NeighbourW[b]; tot1 = tot1 ^ NeighbourW[b]; tot4 = tot2 & carry | tot4; tot2 = tot2 ^ carry;
     carry = tot1 & NeighbourE[b]; tot1 = tot1 ^ NeighbourE[b]; tot4 = tot2 & carry | tot4; tot2 = tot2 ^ carry;
     carry = tot1 & NeighbourS[b]; tot1 = tot1 ^ NeighbourS[b]; tot4 = tot2 & carry | tot4; tot2 = tot2 ^ carry;
     carry = tot1 & NeighbourSW[b]; tot1 = tot1 ^ NeighbourSW[b]; tot4 = tot2 & carry | tot4; tot2 = tot2 ^ carry;
     carry = tot1 & NeighbourSE[b]; tot1 = tot1 ^ NeighbourSE[b]; tot4 = tot2 & carry | tot4; tot2 = tot2 ^ carry;
    
     //Calculate the updated cells:
     // <2 or >3 neighbours, cell dies
     // =2 neighbours, cell continues to live
     // =3 neighbours, new cell born
     NewCells = (CurrCells[b] | tot1) & tot2 & ~ tot4;
     
     //Have any cells changed?
     if (NewCells != CurrCells[b]) {
       myScreen[row * matWidth + b] = swapBytes(NewCells);
       //Count the change for "stale" test
       changes++;
     }
     
     //Current cells (before update), E , W, SE, SW and S neighbours become
     //new N, NW, NE, E, W neighbours and current cells for next loop
     NeighbourN[b] = CurrCells[b];
     NeighbourNW[b] = NeighbourW[b];
     NeighbourNE[b] = NeighbourE[b];
     NeighbourE[b] = NeighbourSE[b];
     NeighbourW[b] = NeighbourSW[b];
     CurrCells[b] = NeighbourS[b];
   } //next col
 } //next row
   
 if (changes != prevChanges) staleCount = 0; else staleCount++; //Detect "stale" matrix
 if (staleCount > 16) injectGlider(); //Inject a glider

 prevChanges = changes;
 delay(100);
}

PROGMEM const unsigned char cardcenter[] = {  // 22x34 pixle 
  120, 96
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xc0,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x30,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc1,0x80,0x08,0x00
,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x02,0x32,0x00,0x08,0x00
,0x00,0x01,0xe0,0x00,0x00,0x60,0x00,0x00,0x00,0x18,0x04,0x0c,0x08,0x84,0x00
,0x00,0x06,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x08,0x80,0x00,0x04,0x00
,0x00,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x04,0x00
,0x00,0x10,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x04,0x01,0x08,0x00
,0x00,0x10,0x02,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x04,0x00,0x78,0x08,0x00
,0x00,0x20,0x01,0x00,0x00,0x00,0x10,0x02,0x40,0x00,0x03,0x80,0x84,0x10,0x00
,0x00,0x20,0x09,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x41,0x02,0x20,0x00
,0x00,0x20,0x09,0x3c,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x22,0x09,0x20,0x20
,0x00,0x20,0x09,0xc3,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x22,0x05,0x20,0x00
,0x00,0x10,0x11,0x00,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0xc2,0x05,0x10,0x00
,0x04,0x10,0xe0,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x03,0x02,0x49,0x08,0x00
,0x00,0x08,0x04,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x04,0x01,0x32,0x08,0x00
,0x00,0x06,0x1c,0x00,0x20,0x0c,0x00,0x00,0x00,0x00,0x08,0x00,0x84,0x04,0x00
,0x00,0x03,0xe4,0x01,0x20,0x12,0x00,0x00,0x00,0x00,0x09,0x10,0x78,0x24,0x00
,0x00,0x00,0x04,0x01,0x20,0x21,0x00,0x80,0x00,0x00,0x10,0x00,0x00,0x04,0x00
,0x00,0x00,0x04,0x01,0x20,0x21,0x00,0x00,0x00,0x00,0x10,0x00,0x02,0x08,0x00
,0x00,0x00,0x02,0x02,0x40,0x12,0x00,0x00,0x0c,0x00,0x10,0x41,0x80,0x88,0x00
,0x00,0x00,0x02,0x1c,0x40,0x0c,0x00,0x00,0x0c,0x00,0x08,0x0e,0x60,0x10,0x00
,0x00,0x00,0x01,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x18,0x60,0x00
,0x00,0x00,0x00,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe0,0x07,0x80,0x00
,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00
,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00
,0x00,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00
,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00
,0x01,0x08,0x0f,0xe1,0xf0,0xfe,0x1e,0x0c,0x3e,0x1e,0x33,0x03,0xf8,0x00,0x00
,0x00,0x90,0x0f,0xe1,0xf0,0x9e,0x12,0x0c,0x3e,0x12,0x33,0x07,0xf8,0x00,0x00
,0x00,0x60,0x3c,0x07,0x8c,0x91,0x92,0x0c,0xf1,0x92,0x30,0x0d,0x00,0x00,0x00
,0x00,0x00,0x24,0x04,0x8c,0x91,0x92,0x0c,0x91,0x9e,0x30,0x0d,0x00,0x06,0x00
,0x00,0x00,0x24,0x04,0x8c,0x91,0x92,0x0c,0x91,0x87,0xc0,0x07,0xe0,0x06,0x00
,0x00,0x00,0x24,0x04,0x8c,0x91,0x92,0x0c,0x9f,0x87,0xc0,0x03,0xf8,0x00,0x00
,0x00,0x00,0x24,0x04,0x8c,0x91,0x92,0x0c,0x9f,0x81,0x80,0x00,0x18,0x00,0x00
,0x00,0x00,0x24,0x04,0x8c,0x91,0x92,0xcc,0x91,0x81,0x80,0x00,0x18,0x00,0x00
,0x00,0x00,0x3c,0x07,0x8c,0x91,0x9e,0xcc,0x91,0x81,0x80,0x00,0x18,0x00,0x00
,0x00,0x00,0x0f,0xe1,0xf0,0x91,0x87,0xb0,0x91,0x81,0x80,0x0f,0xe0,0x00,0x00
,0x00,0x00,0x0f,0xe1,0xf0,0xf1,0x87,0xb0,0xf1,0x81,0x80,0x0f,0xe0,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x07,0xc3,0xf7,0x9f,0xf0,0x03,0xe1,0xff,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x07,0xc3,0xf7,0x9f,0xf0,0x03,0xe1,0x3f,0x00,0x00,0x00
,0x00,0x00,0x00,0xf1,0x9e,0x32,0x59,0x92,0x00,0x0f,0x19,0x20,0x00,0x10,0x00
,0x00,0x00,0x00,0x91,0x92,0x32,0x59,0x92,0x00,0x09,0x19,0x20,0x00,0x00,0x00
,0x00,0x60,0x00,0x90,0x12,0x32,0x41,0x93,0xc0,0x09,0x19,0x20,0x00,0x00,0x00
,0x00,0x60,0x00,0x97,0x93,0xf2,0x41,0x93,0xc0,0x09,0x19,0x3c,0x00,0x00,0x00
,0x00,0x00,0x00,0x97,0x93,0xf2,0x41,0x92,0x00,0x09,0x19,0x3c,0x00,0x00,0x00
,0x00,0x00,0x00,0x91,0x92,0x32,0x41,0x92,0x00,0x09,0x19,0x20,0x00,0x00,0x00
,0x00,0x00,0x00,0xf1,0x92,0x32,0x41,0x92,0x00,0x0f,0x19,0x20,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x12,0x32,0x41,0x9f,0xf0,0x03,0xe1,0x20,0x00,0x03,0x00
,0x00,0x00,0x00,0x3e,0x1e,0x33,0xc1,0x9f,0xf0,0x03,0xe1,0xe0,0x00,0x04,0x80
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x40
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x40
,0x00,0x00,0x00,0x00,0x00,0x1e,0x3c,0xff,0x9f,0xf0,0x00,0x00,0x00,0x04,0x80
,0x00,0x06,0x00,0x00,0x00,0x12,0x3c,0xff,0x9f,0xf0,0x00,0x00,0x00,0x03,0x00
,0x00,0x09,0x00,0x00,0x00,0x12,0x00,0x90,0x12,0x00,0x00,0x01,0x80,0x00,0x00
,0x00,0x10,0x80,0x00,0x00,0x12,0x00,0x90,0x12,0x00,0x00,0x01,0x80,0x00,0x00
,0x00,0x10,0x80,0x00,0x00,0x12,0x3c,0x90,0x13,0xc0,0x00,0x00,0x00,0x00,0x00
,0x00,0x09,0x00,0x00,0x00,0x12,0x24,0x9e,0x13,0xc0,0x00,0x00,0x00,0x00,0x00
,0x00,0x06,0x00,0x00,0x00,0x12,0x24,0x9e,0x12,0x00,0x20,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x12,0x24,0x90,0x12,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x00,0x12,0x24,0x90,0x12,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x00,0x1f,0xa4,0x90,0x1f,0xf0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x1f,0xbc,0xf0,0x1f,0xf0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x30,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0c,0x00,0x00
,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x03,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x10,0x00,0x80,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x28,0x38,0x40,0x00
,0x00,0x00,0x01,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x48,0xc7,0xe0,0x00
,0x00,0x00,0x01,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x91,0x00,0x00,0x00
,0x18,0x00,0x07,0xff,0xff,0x20,0x00,0x00,0x00,0x00,0x09,0x22,0x00,0x00,0x00
,0x24,0x00,0x19,0x04,0x08,0xc0,0x20,0x00,0x10,0x00,0x11,0x44,0x00,0x00,0x00
,0x02,0x70,0x20,0x04,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x88,0x00,0x00,0x00
,0x01,0x98,0x20,0x24,0x00,0xa0,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x40
,0x00,0x0e,0x40,0x20,0x01,0x10,0x00,0x00,0x00,0x01,0x80,0x20,0x00,0x00,0x00
,0x00,0x07,0xc0,0x20,0x00,0x3c,0x00,0x00,0x00,0x7e,0x00,0x20,0x00,0x00,0x00
,0x00,0x01,0xc0,0x00,0x10,0x10,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0xc0,0x00
,0x00,0x00,0x41,0x00,0x08,0x10,0x00,0x0c,0x00,0x10,0x00,0x80,0x01,0x20,0x00
,0x00,0x00,0x22,0x04,0x08,0x20,0x00,0x12,0x00,0x08,0x01,0x00,0x02,0x10,0x00
,0x00,0x00,0x20,0x04,0x00,0x20,0x00,0x21,0x00,0x06,0x0e,0x00,0x02,0x10,0x00
,0x00,0x00,0x18,0x84,0x22,0xd0,0x00,0x21,0x00,0x01,0xf0,0x00,0x01,0x20,0x00
,0x00,0x00,0x07,0xff,0xff,0x08,0x00,0x12,0x00,0x00,0x00,0x06,0x00,0xc0,0x00
,0x00,0x30,0x01,0x10,0xa1,0x00,0x00,0x0c,0x00,0x00,0x00,0x06,0x00,0x00,0x00
,0x00,0x30,0x00,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

};
